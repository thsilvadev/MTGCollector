Reset pasword:

[frontend]
click 'Forgot Password?' > go to TypeEmail.js >  link > Axios.post(${window.name}/reset, {inputEmail = event.target.value })

[backend]
check if user_id where email === req.body.inputEmail //user exists//

jwt.sign (brutaldeathmetal) > send https://mtgchest.com/reset/:token within email to user.email

[frontend]
alert('we sent you an email with the link to reset your password. Please check your email inbox.')
navitate('/login')

//user opens email and click provided link...//

[frontend]
upon click > react-router-dom gets params and sent client-side to ConfirmReset.js

++++
import userParams;
import useNavigate

ConfirmReset () {
navigate = useNavigate;

  const { emailToken } = useParams();

  let [message, setMessage] = useState("");
  let [emailConfirmed, setEmailConfirmed] = useState(false);

  useEffect(() => {
    if (emailToken) {
      Axios.post(`${window.name}/reset/`, {
        token: emailToken,
      }).then((response) => {
        if (response.data.message){
            alert(response.data.message);
            setEmailConfirmed(true);
        }
        }).catch((error) => {
            console.error(error);
            setMessage(error.response.data.error);
        })
    }
  }, [emailToken, message]);
}

if (emailConfirmed){
return ( form )
} else {
return (
Hey fellow Magic player. 
While the hourglass runs the mystic sands of time, please, take your time...
{message}
  )
 }
}
++++

[backend]

const {token} = req.body;

const data = jwt.verify(token, "brutaldeathmetal");

if (!data.email){
        return res.sendStatus(401)
      } else {
       await knex('users')
        .where('email', data.email)
        .update({
          confirmed: confirmed
        });
        console.log(`User successfully confirmed email ${data.email}. Proceed to password update.`);
        res.status(200).json({message: "User successfully confirmed email ${data.email}. Proceed to password update."})
      }
	
}

[frontend]

if (response.data.message === "User successfully confirmed email ${data.email}. Proceed to password update."){
	return ( resetPassword form); //render form [new password, confirm new password]//
} 



get email from jwt > store localStorage;

upon submit > Axios.update(/passwordreset, {email: localStorage.data.email, password: inputPassword});

hash password > insert hashedpassword;

return status;







